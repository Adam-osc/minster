# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import statistics_pb2 as statistics__pb2


class StatisticsServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.stream_duty_time = channel.unary_stream(
        '/ont.rpc.statistics.StatisticsService/stream_duty_time',
        request_serializer=statistics__pb2.StreamDutyTimeRequest.SerializeToString,
        response_deserializer=statistics__pb2.StreamDutyTimeResponse.FromString,
        )


class StatisticsServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def stream_duty_time(self, request, context):
    """Tracks how much time has been spent in each channel state, aggregated across all the channels

    Will fail with FAILED_PRECONDITION if minknow is not acquiring data unless `wait_for_processing` is set to True,
    then it will block and wait for data to start acquiring.

    The first response will give you all the data it can

    Since 1.13
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StatisticsServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'stream_duty_time': grpc.unary_stream_rpc_method_handler(
          servicer.stream_duty_time,
          request_deserializer=statistics__pb2.StreamDutyTimeRequest.FromString,
          response_serializer=statistics__pb2.StreamDutyTimeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ont.rpc.statistics.StatisticsService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
